"""
Task 21: Data Classes (@dataclass) - Simplifying Class Creation
Concept:
The `@dataclass` decorator (Python 3.7+) automatically generates methods like
`__init__`, `__repr__`, `__eq__`, and optionally others (`order=True` for comparison)
for classes primarily used to store data. Reduces boilerplate!
Let's define a 'Student' and a 'Course' using dataclasses.
"""
from dataclasses import dataclass, field
from typing import List, Optional # For type hints

@dataclass(frozen=False, order=True) # order=True adds comparison methods; frozen=True makes immutable
class Student:
    student_id: str = field(compare=True) # Used for sorting if order=True
    name: str
    major: str
    gpa: float = field(default=0.0, compare=False) # Not used for default sorting
    # compare=False means gpa won't be used by default __lt__, __gt__ etc.

    # You can still add custom methods
    def is_on_deans_list(self, threshold=3.5):
        return self.gpa >= threshold

    def __post_init__(self): # Called after __init__
        if self.gpa < 0 or self.gpa > 4.0:
            print(f"Warning: GPA for {self.name} ({self.gpa}) is outside the typical 0.0-4.0 range. Correcting to bounds.")
            self.gpa = max(0.0, min(self.gpa, 4.0))


@dataclass
class Course:
    course_code: str
    title: str
    credits: int
    enrolled_students: List[Student] = field(default_factory=list) # Use default_factory for mutable defaults

    def add_student(self, student: Student):
        if student not in self.enrolled_students:
            self.enrolled_students.append(student)
            print(f"Student {student.name} enrolled in {self.title}.")
        else:
            print(f"Student {student.name} already enrolled in {self.title}.")

    def get_enrollment_count(self):
        return len(self.enrolled_students)

def get_input_params():
    return [
        {"name": "s1_id", "label": "Student 1 ID:", "type": "text_input", "default": "S1001"},
        {"name": "s1_name", "label": "Student 1 Name:", "type": "text_input", "default": "Alice Smith"},
        {"name": "s1_major", "label": "Student 1 Major:", "type": "text_input", "default": "Computer Science"},
        {"name": "s1_gpa", "label": "Student 1 GPA:", "type": "number_input", "default": 3.8, "min_value":0.0, "max_value":4.0, "step":0.1, "format":"%.1f"},

        {"name": "s2_id", "label": "Student 2 ID:", "type": "text_input", "default": "S1002"},
        {"name": "s2_name", "label": "Student 2 Name:", "type": "text_input", "default": "Bob Johnson"},
        {"name": "s2_major", "label": "Student 2 Major:", "type": "text_input", "default": "Mathematics"},
        {"name": "s2_gpa", "label": "Student 2 GPA:", "type": "number_input", "default": 3.4, "min_value":0.0, "max_value":4.0, "step":0.1, "format":"%.1f"},

        {"name": "course_c", "label": "Course Code:", "type": "text_input", "default": "CS101"},
        {"name": "course_t", "label": "Course Title:", "type": "text_input", "default": "Intro to Programming"},
        {"name": "course_cred", "label": "Course Credits:", "type": "number_input", "default": 3, "min_value":1, "step":1, "format":"%d"},
    ]

def run_task(s1_id, s1_name, s1_major, s1_gpa, s2_id, s2_name, s2_major, s2_gpa,
             course_c, course_t, course_cred):

    print("--- Creating Student objects (Dataclasses) ---")
    student1 = Student(student_id=s1_id, name=s1_name, major=s1_major, gpa=s1_gpa)
    student2 = Student(s2_id, s2_name, s2_major, s2_gpa) # Positional args also work
    student3 = Student(student_id="S0999", name="Charlie Brown", major="Art", gpa=2.5) # For sorting later

    print(f"Student 1: {student1}")  # Uses auto-generated __repr__
    print(f"Student 2: {student2}")
    print(f"Is {student1.name} on Dean's List? {student1.is_on_deans_list()}")
    print(f"Is {student2.name} on Dean's List? {student2.is_on_deans_list(threshold=3.2)}") # Custom threshold

    print("\n--- Comparing Students (order=True, compares by student_id by default) ---")
    print(f"Is student1 < student2? ({student1.student_id} < {student2.student_id}?) -> {student1 < student2}")

    student_list = [student1, student2, student3]
    print(f"\nUnsorted student list: {student_list}")
    sorted_students = sorted(student_list) # Uses __lt__ generated by order=True (based on student_id)
    print("Sorted student list (by ID):")
    for s in sorted_students:
        print(f"  {s}")

    print("\n--- Creating a Course object (Dataclass with mutable default) ---")
    my_course = Course(course_code=course_c, title=course_t, credits=course_cred)
    print(f"Course: {my_course}")

    print("\n--- Enrolling students ---")
    my_course.add_student(student1)
    my_course.add_student(student2)
    my_course.add_student(student1) # Try adding again

    print(f"\nCourse '{my_course.title}' has {my_course.get_enrollment_count()} students:")
    for s_enrolled in my_course.enrolled_students:
        print(f"  - {s_enrolled.name} ({s_enrolled.student_id})")

    print("\nDataclasses significantly reduce boilerplate for data-centric classes.")

if __name__ == "__main__":
    run_task("A500", "Zoe", "Physics", 3.9, "B200", "Xavier", "Biology", 3.1,"PY201", "Advanced Python", 4)